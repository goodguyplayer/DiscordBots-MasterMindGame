package models;

import java.util.HashMap;
import java.util.concurrent.ThreadLocalRandom;

/**
 * Class meant to represent the code instance in the game session.
 * Should randomly generate a code of 4 letter on initialization and return it whenever called.
 *
 * @author Nathan (goodguyplayer)
 * @Version 0
 * @since 2021-04-17
 */

/*
Changelog.:

Version 0.1.:
    - Changed random number generation range to 102.
        - Limit it to 6 letters, like how it was in the original game with colors..

Version 0.:
    - class created
    - Added var
    - Added constructor
    - Added method for random number generation
    - Added method to convert number to letter.
    - Added method to create the code
    - Added getter

 */
public class Code {
    String code = new String();
    HashMap<Character, Integer> codeAppearances = new HashMap<Character, Integer>();
    HashMap<Character, Integer> codePosition = new HashMap<Character, Integer>();


    /**
     * Constructor for Code. Once initialized, the constructor will call the method to generate a random code.
     * @author Nathan (goodguyplayer)
     */
    public Code() {
        code = createCode();
        fillCodeAppearances();
        fillCodePosition();
    }

    public Code(String code) {
        this.code = code;
        fillCodeAppearances();
        fillCodePosition();
    }

    /**
     * method that generates random numbers, from 97 to 102, ascii.
     * @return A random int that goes from 97 to 102
     * @author Nathan (goodguyplayer)
     */
    private int randomNumber() {
        //return ThreadLocalRandom.current().nextInt(97, 122 + 1);
        return ThreadLocalRandom.current().nextInt(97, 102 + 1);
    }

    private void fillCodeAppearances(){
        for (char letter: code.toCharArray()) {
            if (isLetterInCodeAppearances(letter)) {
                codeAppearances.put(letter, codeAppearances.get(letter) + 1);
            } else {
                codeAppearances.put(letter, 1);
            }
        }
    }

    private void fillCodePosition(){
        for (int i = 0; i < 4; i++) {
            codePosition.put(code.charAt(i), i);
        }
    }

    private boolean isLetterInCodeAppearances(char letter){
        return (codeAppearances.get(letter) != null) ? true : false;
    }

    /**
     * method that converts a random number to char.
     * The range is to lowercase letters only.
     * @param randomnumber A random number generated by randomNumber
     * @return the char which the number represents
     * @author Nathan (goodguyplayer)
     */
    private char convertNumberChar(int randomnumber) {
        return (char)randomnumber;
    }

    /**
     * method that creates the code of 4 letters, using the methods randomNumber and convertNumberChar.
     * @return {String} code
     */
    private String createCode() {
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < 4; i++) {
            str.append(convertNumberChar(randomNumber()));
        }
        return str.toString();
    }

    /**
     * Getter for code
     * @return {String} code
     */
    public String getCode() {
        return code;
    }

    public HashMap<Character, Integer> getCodeAppearances() {
        return codeAppearances;
    }

    public HashMap<Character, Integer> getCodePosition() {
        return codePosition;
    }
}
